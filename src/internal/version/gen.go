// +build ignore

package main

// This program generates version_gen.go. Invoke it as
//	go run gen.go

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

const (
	major      = 0
	minor      = 0
	patch      = 0
	prerelease = "experimental"

	source = `
		// Generated by go run gen.go
		// Do not edit.
		// This file must be included in .gitignore.

		package version

		const (
			buildtime  = %q
			gitcommit  = %q
		)

		var (
			major      = %d
			minor      = %d
			patch      = %d
			prerelease = %q
		)
`
)

func main() {
	flagFilename := flag.String("o", "version_gen.go", "output file name")
	flag.Parse()
	//fmt.Printf("go:generate in %s -> %s\n", os.Getenv("GOFILE"), *flagFilename)

	buildtime := time.Now().Format("20060102150405")
	gitcommit := "0000000000000000000000000000000000000000"
	if isGitRepo() {
		gitcommit = getGitCommit()
	}

	buf := &bytes.Buffer{}

	fmt.Fprintf(buf, source,
		buildtime,
		gitcommit,
		major,
		minor,
		patch,
		prerelease,
	)

	data := formatSource(buf.Bytes())
	writeFile(*flagFilename, data)
}

// isGitRepo reports whether the working directory is inside a Git repository.
func isGitRepo() bool {
	p := ".git"
	for {
		fi, err := os.Stat(p)
		if os.IsNotExist(err) {
			p = filepath.Join("..", p)
			continue
		}
		if err != nil || !fi.IsDir() {
			return false
		}
		return true
	}
}

func getGitCommit() string {
	return runCmd("git", "rev-parse", "--short", "HEAD")
}

//func getGitCommitGoStyle() string {
//	return runCmd("git", "log", "-n", "1", "--format=format: +%h %cd", "HEAD")
//}

func runCmd(cmd ...string) string {
	out, err := exec.Command(cmd[0], cmd[1:]...).Output()
	if err != nil {
		panic(err)
	}
	return chomp(string(out))
}

func formatSource(data []byte) []byte {
	src, err := format.Source(data)
	if err != nil {
		log.Fatal(err)
	}
	return src
}

func writeFile(file string, data []byte) {
	err := ioutil.WriteFile(file, data, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

// Remove trailing spaces.
func chomp(s string) string {
	return strings.TrimRight(s, " \t\r\n")
}
